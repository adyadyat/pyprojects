import sys

num = float(sys.argv[1])
num = "{:.2f}".format(num)
num = "{:0>8s}".format(num)
num = "{:.>16s}".format(num)
print(num)

"""
# Альтернативный вариант.
import sys

digit = float(sys.argv[1])

# Создаем число длиной 8 знаков, 
с двумая знаками после десятичной точки
# и нулем в качестве заполнителя.
digit = "{:08.2f}".format(digit)

# Форматируем итоговую строку с точками.
digit = "{:.>16s}".format(digit)

print(digit)

# Альтернативный вариант, 2
# Такое же решение, что и в первом случае, но в одну строку.
# Не рекомендуем так писать, потому что решение неочевидно.
import sys
print("{:.>16s}".format("{:0>8s}".format("{:.2f}".format(float(sys.argv[1])))))
ЗАПОЛНИТЕЛИ
В прошлых заданиях, когда мы выравнивали текст по левому и правому краю, 
а также по центру, в качестве заполнителя использовался пробел. 
Однако мы можем выбрать любой другой символ. 
Достаточно вставить символ сразу после двоеточия в спецификаторе:
{:S<Ns} — выравнивание по левому краю в строке длиной N с заполнителем S,
{:S>Ns} — выравнивание по правому краю в строке длиной N с заполнителем S,
{:S^Ns} — выравнивание по центру в строке длиной N с заполнителем S.
В качестве заполнителя S может выступать любой символ: 
цифры, буквы, знаки препинания.

Напишите программу, 
которая принимает из первого аргумента командной строки вещественное число,
 а затем выводит его в следующем формате: число должно выводится с двумя
  знаками после десятичной точки, под целую нужно выделить 5 знаков. 
  Если целая часть меньше 10000, то слева нужно дополнить его нулями: 
  123 -> 00123. 
  Далее полученный результат должен помещаться в 
  строку длиной 16 символов выравниванием по правому краю с точкой 
  в качестве заполнителя.

Пример использования в командной строке Windows:
> python program.py 178.451
> ........00178.45
"""